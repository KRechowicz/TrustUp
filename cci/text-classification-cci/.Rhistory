tos_tokens = tos_tokens %>% filter(str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
# tos_tokens = filter(tos_tokens, str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
tos_tokens = tos_tokens %>% anti_join(stop_words, by="word")
tos_tokens = tos_tokens %>% mutate(word = SnowballC::wordStem(word))
# model variables
model_vars = colnames(tos_model$trainingData)
model_vars = model_vars[2:length(model_vars)]
# tweets with entries we can classify are
rows_we_can_classify = tos_tokens$ID %>% unique()
tos_document_to_classify_as_tbl_for_classification = tos_document_to_classify_as_tbl[rows_we_can_classify,]
# create a document-term matrix with all features and tf weighting
# you can ignore the warning
tos_dtm = count(tos_tokens, ID, word)
tos_dtm = cast_dtm(tos_dtm, document = ID, term = word, value = n)
# remove any tokens that are missing from more than 99% of the documents in the corpus
tos_dtm = removeSparseTerms(tos_dtm, sparse = .99)
model_data = cbind.data.frame(as.matrix(tos_dtm))
needed_names = setdiff(model_vars, tos_tokens$word)
needed_names = c(needed_names, setdiff(model_vars, colnames(model_data)))
needed_names = needed_names %>% unique()
for (i in 1:length(needed_names))
{
colnames_of_interest = needed_names[i]
model_data[,colnames_of_interest] = 0
}
model_data = model_data[,model_vars]
classifications_for_tos_document = predict(tos_model, model_data)
tos_document_to_classify_as_tbl_for_classification$Vendor = classifications_for_tos_document
tos_document_summary = tos_document_to_classify_as_tbl_for_classification %>% group_by(Vendor) %>% summarise(VendorProbability = n()) %>% arrange(desc(VendorProbability))
tos_document_summary = tos_document_summary %>% mutate(VendorProbability = VendorProbability / sum(VendorProbability))
tos_plurality_classification = tos_document_summary$Vendor[1]
print(paste("The plurality vendor match for this document is:", tos_plurality_classification))
print("The detailed breakdown of its vendor DNA is:")
print(tos_document_summary)
library(tidyverse)
library(tm)
library(caret)
library(tidytext)
source("code/text-classification-api.R")
tos_model = readRDS("models/terms-of-service/tos_rf.RDS")
privacy_model = readRDS("models/terms-of-service/privacy_rf.RDS")
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
filename_of_tos_txt_document_to_classify = fitbit_filename
tos_document_to_classify_as_tbl = read_txt_file_into_tibble(filename_of_tos_txt_document_to_classify)
# unnest all the tokens
tos_tokens = tos_document_to_classify_as_tbl %>% unnest_tokens(output = word, input = Text)
# filter out any text that contains a digit anywhere or is not of length 5
tos_tokens = tos_tokens %>% filter(str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
# tos_tokens = filter(tos_tokens, str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
tos_tokens = tos_tokens %>% anti_join(stop_words, by="word")
tos_tokens = tos_tokens %>% mutate(word = SnowballC::wordStem(word))
# model variables
model_vars = colnames(tos_model$trainingData)
model_vars = model_vars[2:length(model_vars)]
# tweets with entries we can classify are
rows_we_can_classify = tos_tokens$ID %>% unique()
tos_document_to_classify_as_tbl_for_classification = tos_document_to_classify_as_tbl[rows_we_can_classify,]
# create a document-term matrix with all features and tf weighting
# you can ignore the warning
tos_dtm = count(tos_tokens, ID, word)
tos_dtm = cast_dtm(tos_dtm, document = ID, term = word, value = n)
# remove any tokens that are missing from more than 99% of the documents in the corpus
tos_dtm = removeSparseTerms(tos_dtm, sparse = .99)
model_data = cbind.data.frame(as.matrix(tos_dtm))
needed_names = setdiff(model_vars, tos_tokens$word)
needed_names = c(needed_names, setdiff(model_vars, colnames(model_data)))
needed_names = needed_names %>% unique()
for (i in 1:length(needed_names))
{
colnames_of_interest = needed_names[i]
model_data[,colnames_of_interest] = 0
}
model_data = model_data[,model_vars]
classifications_for_tos_document = predict(tos_model, model_data)
tos_document_to_classify_as_tbl_for_classification$Vendor = classifications_for_tos_document
tos_document_summary = tos_document_to_classify_as_tbl_for_classification %>% group_by(Vendor) %>% summarise(VendorProbability = n()) %>% arrange(desc(VendorProbability))
tos_document_summary = tos_document_summary %>% mutate(VendorProbability = VendorProbability / sum(VendorProbability))
tos_plurality_classification = tos_document_summary$Vendor[1]
print(paste("The plurality vendor match for this document is:", tos_plurality_classification))
print("The detailed breakdown of its vendor DNA is:")
print(tos_document_summary)
library(tidyverse)
library(tm)
library(caret)
library(tidytext)
source("code/text-classification-api.R")
tos_model = readRDS("models/terms-of-service/tos_rf.RDS")
privacy_model = readRDS("models/terms-of-service/privacy_rf.RDS")
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
filename_of_tos_txt_document_to_classify = fitbit_filename
tos_document_to_classify_as_tbl = read_txt_file_into_tibble(filename_of_tos_txt_document_to_classify)
# unnest all the tokens
tos_tokens = tos_document_to_classify_as_tbl %>% unnest_tokens(output = word, input = Text)
# filter out any text that contains a digit anywhere or is not of length 5
tos_tokens = tos_tokens %>% filter(str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
# tos_tokens = filter(tos_tokens, str_detect(word, "^\\D+$") & str_detect(word, "\\w{5,}"))
tos_tokens = tos_tokens %>% anti_join(stop_words, by="word")
tos_tokens = tos_tokens %>% mutate(word = SnowballC::wordStem(word))
# model variables
model_vars = colnames(tos_model$trainingData)
model_vars = model_vars[2:length(model_vars)]
# tweets with entries we can classify are
rows_we_can_classify = tos_tokens$ID %>% unique()
tos_document_to_classify_as_tbl_for_classification = tos_document_to_classify_as_tbl[rows_we_can_classify,]
# create a document-term matrix with all features and tf weighting
# you can ignore the warning
tos_dtm = count(tos_tokens, ID, word)
tos_dtm = cast_dtm(tos_dtm, document = ID, term = word, value = n)
# remove any tokens that are missing from more than 99% of the documents in the corpus
tos_dtm = removeSparseTerms(tos_dtm, sparse = .99)
model_data = cbind.data.frame(as.matrix(tos_dtm))
needed_names = setdiff(model_vars, tos_tokens$word)
needed_names = c(needed_names, setdiff(model_vars, colnames(model_data)))
needed_names = needed_names %>% unique()
for (i in 1:length(needed_names))
{
colnames_of_interest = needed_names[i]
model_data[,colnames_of_interest] = 0
}
model_data = model_data[,model_vars]
classifications_for_tos_document = predict(tos_model, model_data)
tos_document_to_classify_as_tbl_for_classification$Vendor = classifications_for_tos_document
tos_document_summary = tos_document_to_classify_as_tbl_for_classification %>% group_by(Vendor) %>% summarise(VendorProbability = n()) %>% arrange(desc(VendorProbability))
tos_document_summary = tos_document_summary %>% mutate(VendorProbability = VendorProbability / sum(VendorProbability))
tos_plurality_classification = tos_document_summary$Vendor[1]
print(paste("The plurality vendor match for this document is:", tos_plurality_classification))
print("The detailed breakdown of its vendor DNA is:")
print(tos_document_summary)
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
letter_grade_for_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS", avoid_model_bias = AVOID_MODEL_BIAS)
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY", avoid_model_bias = AVOID_MODEL_BIAS)
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file, avoid_model_bias = AVOID_MODEL_BIAS) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = TRUE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = FALSE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = FALSE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = FALSE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = FALSE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
"[E]" %>% fromJSON()
library(jsonlite)
"[E]" %>% fromJSON()
["E"] %>% fromJSON()
'["E"]' %>% fromJSON()
source("code/classify-document.R")
library(plumber)
pr <- plumber::plumb("code/get-grade-for-txt-file-api.R")
pr$run(host="0.0.0.0", port=4000)
source("code/classify-document.R")
library(plumber)
pr <- plumber::plumb("code/get-grade-for-txt-file-api.R")
pr$run(host="0.0.0.0", port=4000)
library(tidyverse)
# get our functions from classify document
source("code/classify-document.R")
prettyPrintResult = function(filename, result)
{
print(paste("Filename:",filename,"yielded:",result))
}
TEST_GET_LETTER_GRADE = TRUE
TEST_SIMILAR_VENDOR = TRUE
AVOID_MODEL_BIAS = TRUE
RETURN_DNA_DF = FALSE
# example tos files
whoop_filename_tos = "input/terms-of-service/whoop-tos.txt"
fitbit_filename_tos = "input/terms-of-service/fitbit-tos.txt"
cellartracker_filename_tos = "input/terms-of-service/cellartracker-tos.txt"
google_nest_filename_tos = "input/terms-of-service/google-nest-tos.txt"
# example privacy files
whoop_filename_privacy = "input/privacy-policy/whoop-privacy.txt"
fitbit_filename_privacy = "input/privacy-policy/fitbit-privacy.txt"
cellartracker_filename_privacy = "input/privacy-policy/cellartracker-privacy.txt"
google_nest_filename_privacy = "input/privacy-policy/google-nest-privacy.txt"
# put them in vectors
tos_filelist = c(whoop_filename_tos, fitbit_filename_tos, cellartracker_filename_tos, google_nest_filename_tos)
privacy_filelist = c(whoop_filename_privacy, fitbit_filename_privacy, cellartracker_filename_privacy, google_nest_filename_privacy)
# get a random tos file
random_tos_file = tos_filelist %>% sample(1)
# get a random privacy file
random_privacy_file = privacy_filelist %>% sample(1)
# get a random file - could be either tos or privacy - for testing "infer"
random_file = c(tos_filelist, privacy_filelist) %>% sample(1)
if (TEST_GET_LETTER_GRADE)
{
letter_grade_for_tos_vendor = get_grade_for_txt_file(txt_filename = random_tos_file, filetype="TOS")
prettyPrintResult(random_tos_file, letter_grade_for_tos_vendor)
letter_grade_for_privacy_vendor = get_grade_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY")
prettyPrintResult(random_privacy_file, letter_grade_for_privacy_vendor)
letter_grade_for_inferred_vendor = get_grade_for_txt_file(txt_filename = random_file) # same as filetype = "INFER"
prettyPrintResult(random_file, letter_grade_for_inferred_vendor)
}
if (TEST_SIMILAR_VENDOR)
{
similar_tos_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_tos_file, filetype="TOS",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_tos_file, similar_tos_vendor)
similar_privacy_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_privacy_file, filetype="PRIVACY",
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF)
prettyPrintResult(random_privacy_file, similar_privacy_vendor)
similar_inferred_vendor = get_most_similar_vendor_for_txt_file(txt_filename = random_file,
avoid_model_bias = AVOID_MODEL_BIAS,
return_dna_df = RETURN_DNA_DF) # same as filetype = "INFER"
prettyPrintResult(random_file, similar_inferred_vendor)
}
